// node_modules/olova/dist/hooks/createSignal.js
var currentEffect = null;
var setCurrentEffect = (t) => {
  currentEffect = t;
};
function createSignal(t) {
  let e = t;
  const r = /* @__PURE__ */ new Set();
  return [
    () => (currentEffect && r.add(currentEffect), e),
    (t2) => (e = "function" == typeof t2 ? t2(e) : t2, r.forEach((t3) => t3()), e)
  ];
}

// node_modules/olova/dist/hooks/createEffect.js
function createEffect(t) {
  const e = () => {
    f(), setCurrentEffect(e);
    try {
      f = t() || (() => {
      });
    } finally {
      setCurrentEffect(null);
    }
  };
  let f = () => {
  };
  e();
}

// node_modules/olova/dist/hooks/createMemo.js
function createMemo(t, e = []) {
  const [o, s] = createSignal(void 0), [c, a] = createSignal(e), [i, r] = createSignal(void 0);
  return createEffect(() => {
    if (void 0 === i || (f = c, (o2 = e).length !== f.length || o2.some((t2, e2) => !Object.is(t2, f[e2])))) {
      const o3 = t();
      Object.is(o3, i) || (r(o3), s(o3)), a(e);
    }
    var o2, f;
  }), o;
}

// node_modules/olova/dist/hooks/createRef.js
function createRef(e = null) {
  const [r, t] = createSignal({ current: e });
  return {
    get current() {
      return r().current;
    },
    set current(e2) {
      t({ current: e2 });
    }
  };
}

// node_modules/olova/dist/olova.js
function h(e, t = {}, ...n) {
  if (e === h.Fragment) {
    const e2 = document.createDocumentFragment(), t2 = n.flat();
    for (let n2 = 0; n2 < t2.length; n2++) {
      const o2 = t2[n2];
      if ("function" == typeof o2) {
        const t3 = document.createTextNode("");
        createEffect(() => {
          const n3 = o2();
          if (Array.isArray(n3)) {
            const o3 = t3.previousSibling;
            o3 && o3.remove();
            const r = document.createDocumentFragment();
            for (let e3 = 0; e3 < n3.length; e3++) {
              const t4 = n3[e3];
              r.appendChild(t4 instanceof Node ? t4 : document.createTextNode(String(t4)));
            }
            e2.insertBefore(r, t3);
          } else t3.textContent = String(n3);
        }), e2.appendChild(t3);
      } else o2 instanceof Node ? e2.appendChild(o2) : null != o2 && e2.appendChild(document.createTextNode(String(o2)));
    }
    return e2;
  }
  const o = "function" == typeof e ? e(t) : document.createElement(e);
  if ("function" != typeof e) {
    if (t) {
      const e3 = Object.entries(t);
      for (let t2 = 0; t2 < e3.length; t2++) {
        const [n2, r2] = e3[t2];
        "ref" === n2 ? queueMicrotask(() => {
          r2 && "object" == typeof r2 && (r2.current = o);
        }) : n2.startsWith("on") ? o.addEventListener(n2.slice(2).toLowerCase(), r2) : "style" === n2 && "object" == typeof r2 ? Object.assign(o.style, r2) : "className" === n2 ? o.className = r2 : o.setAttribute(n2, r2);
      }
    }
    const e2 = document.createTextNode(""), r = n.flat();
    for (let t2 = 0; t2 < r.length; t2++) {
      const n2 = r[t2];
      if ("function" == typeof n2) createEffect(() => {
        const t3 = n2();
        if (Array.isArray(t3)) {
          o.textContent = "";
          const e3 = document.createDocumentFragment();
          for (let n3 = 0; n3 < t3.length; n3++) {
            const o2 = t3[n3];
            e3.appendChild(o2 instanceof Node ? o2 : document.createTextNode(String(o2)));
          }
          o.appendChild(e3);
        } else e2.textContent = String(t3), e2.parentNode || o.appendChild(e2);
      });
      else if (Array.isArray(n2)) {
        const e3 = document.createDocumentFragment();
        for (let t3 = 0; t3 < n2.length; t3++) {
          const o2 = n2[t3];
          o2 instanceof Node ? e3.appendChild(o2) : null != o2 && e3.appendChild(document.createTextNode(String(o2)));
        }
        o.appendChild(e3);
      } else n2 instanceof Node ? o.appendChild(n2) : null != n2 && o.appendChild(document.createTextNode(String(n2)));
    }
  }
  return o;
}
h.Fragment = Symbol("Fragment");
var Fragment = h.Fragment;
export {
  createEffect as $effect,
  createMemo as $memo,
  createRef as $ref,
  createSignal as $state,
  Fragment,
  h
};
//# sourceMappingURL=olova.js.map
